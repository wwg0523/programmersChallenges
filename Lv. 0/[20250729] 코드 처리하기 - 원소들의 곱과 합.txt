【 2025.07.29 】

코드 처리하기

<<< 문제 설명 >>>

문자열 code가 주어집니다.
code를 앞에서부터 읽으면서 만약 문자가 "1"이면 mode를 바꿉니다. mode에 따라 code를 읽어가면서 문자열 ret을 만들어냅니다.

mode는 0과 1이 있으며, idx를 0 부터 code의 길이 - 1 까지 1씩 키워나가면서 code[idx]의 값에 따라 다음과 같이 행동합니다.

mode가 0일 때
code[idx]가 "1"이 아니면 idx가 짝수일 때만 ret의 맨 뒤에 code[idx]를 추가합니다.
code[idx]가 "1"이면 mode를 0에서 1로 바꿉니다.
mode가 1일 때
code[idx]가 "1"이 아니면 idx가 홀수일 때만 ret의 맨 뒤에 code[idx]를 추가합니다.
code[idx]가 "1"이면 mode를 1에서 0으로 바꿉니다.
문자열 code를 통해 만들어진 문자열 ret를 return 하는 solution 함수를 완성해 주세요.

단, 시작할 때 mode는 0이며, return 하려는 ret가 만약 빈 문자열이라면 대신 "EMPTY"를 return 합니다.



<<< 내 풀이 >>>

class Solution {
    public String solution(String code) {
        int mode = 0;
        String ret = "";
        for(int idx = 0; idx < code.length(); idx++) {
            if(code.substring(idx, idx + 1).equals("1")) {
                mode = mode == 1 ? 0 : 1;
            } else if(mode == 0 && idx % 2 == 0) {
                ret += code.substring(idx, idx + 1);
            } else if(mode == 1 && idx % 2 != 0) {
                ret += code.substring(idx, idx + 1);
            }
        }
        if(ret.equals("")) ret = "EMPTY";
        String answer = ret;
        return answer;
    }
}



<<< 다른 사람의 풀이 >>>

class Solution {
    public String solution(String code) {
        StringBuilder answer = new StringBuilder();
        int mode = 0;
        for (int i = 0; i < code.length(); i++) {
            char current = code.charAt(i);
            if (current == '1') {
                mode = mode == 0 ? 1 : 0;
                continue;
            }

            if (i % 2 == mode) {
                answer.append(current);
            }
        }
        return answer.length() == 0 ? "EMPTY" : answer.toString();
    }
}

(똑같은 코드를 또 쓰기 싫어서 어떻게 더 줄일 수 있을까 고민했었다)

(처음엔 다른 사람의 풀이를 보고 바로 이해를 못했다)

==================================================

주사위 게임 2

<<< 문제 설명 >>>

1부터 6까지 숫자가 적힌 주사위가 세 개 있습니다. 세 주사위를 굴렸을 때 나온 숫자를 각각 a, b, c라고 했을 때 얻는 점수는 다음과 같습니다.

세 숫자가 모두 다르다면 a + b + c 점을 얻습니다.
세 숫자 중 어느 두 숫자는 같고 나머지 다른 숫자는 다르다면 (a + b + c) × (a2 + b2 + c2 )점을 얻습니다.
세 숫자가 모두 같다면 (a + b + c) × (a2 + b2 + c2 ) × (a3 + b3 + c3 )점을 얻습니다.
세 정수 a, b, c가 매개변수로 주어질 때, 얻는 점수를 return 하는 solution 함수를 작성해 주세요.



<<< 내 풀이 >>>

class Solution {
    public int solution(int a, int b, int c) {
        int answer = 0;
        if(a == b && b == c) {
            answer = (a + b + c) * (a * a + b * b + c * c) * (a * a * a + b * b * b + c * c * c);
        } else if(a != b && b != c && c != a) {
            answer = a + b + c;
        } else {
            answer = (a + b + c) * (a * a + b * b + c * c);
        }
        return answer;
    }
}



<<< 다른 사람의 풀이 >>>

class Solution {
    public int solution(int a, int b, int c) {
        int answer = 1;

        int count = 1;
        if(a == b || a == c || b == c) {
            count++;
        }

        if(a == b && b == c) {
            count++;
        }

        for(int i = 1; i <= count; i++) {
            answer *= (pow(a,i)+pow(b,i)+pow(c,i));
        }

        return answer;
    }

    private int pow(int a, int b) {
        if(b == 0) return 1;
        return a * pow(a, b-1);
    }
}

(if문 조건식에 a == b && b != c 라고 써서 테스트가 몇 개는 맞고 몇 개는 틀리는 상황이 벌어졌었다)

(다른 사람의 풀이는 그동안 제곱을 a * a 식으로 썼는데 다음 문제부터는 pow() 를 써보고 싶어서 가져와봤다)

==================================================

원소들의 곱과 합

<<< 문제 설명 >>>

정수가 담긴 리스트 num_list가 주어질 때, 모든 원소들의 곱이 모든 원소들의 합의 제곱보다 작으면 1을 크면 0을 return하도록 solution 함수를 완성해주세요.



<<< 내 풀이 >>>

class Solution {
    public int solution(int[] num_list) {
        int a = num_list[0];
        int b = num_list[0];
        int answer = 0;
        for(int i = 1; i < num_list.length; i++) {
            a *= num_list[i];
            b += num_list[i];
        }
        if(a < b * b) answer = 1;
        return answer;
    }
}



<<< 다른 사람의 풀이 >>>

import java.util.Arrays;

class Solution {
    public int solution(int[] numList) {
        return (Arrays.stream(numList).reduce((acc, i) -> acc * i).getAsInt() < Math.pow(Arrays.stream(numList).sum(), 2)) ? 1 : 0;
    }
}

(for문에 int i = 0; 으로 시작해서 a 의 값이 0 만 나오는 실수를 했다)

(다른 사람의 풀이는 아직 사용하기는 힘들겠지만 눈에 익혀두려고 가져와봤다)
